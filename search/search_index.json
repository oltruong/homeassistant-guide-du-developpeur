{"config":{"indexing":"full","lang":["fr"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home Assistant - Guide du d\u00e9veloppeur \u00b6 La bo\u00eete \u00e0 outils Participer aux projets Les environnements (Le backend et le frontend) Pr\u00e9parer son environnement Les ressources Pr\u00e9sentation \u00b6 Ce guide a pour vocation de pr\u00e9senter le d\u00e9veloppement de composants de Home Assistant. Pour ce faire nous pr\u00e9senterons ind\u00e9pendamment chacun des environnements de d\u00e9veloppement : le backend qui concerne les int\u00e9grations (entit\u00e9s/sensors) le frontend qui concerne l'interface utilisateur (Lovelace et ses composants) La bo\u00eete \u00e0 outils \u00b6 Chaque environnement a ses outils sp\u00e9cifiques et seront pr\u00e9cis\u00e9s dans chaque section. N\u00e9anmoins voici quelques \u00e9l\u00e9ments commun aux deux : Obligatoires : git pour la gestion de version. Un compte Github Recommand\u00e9s : Docker pour tester vos contributions dans un environement local et d\u00e9di\u00e9 (conteneur). Visual Studio Code (VSC) . Tout autre editeur peut convenir. VSC offre plusieurs addons qui facilitent le d\u00e9veloppemnent avec Home Assistant. L'Addon Remote - Containers pour VSC. Il permet d'utiliser les conteneurs de d\u00e9veloppement via Docker. Participer aux projets \u00b6 Avant de pr\u00e9senter plus en avant le d\u00e9veloppement sous Home Assistant, nous allons faire un point sur la gestion d'un projet (un d\u00e9veloppement). Si vous \u00eates familier avec GitHub, vous pouvez passer ce chapitre. Pour les autres ... Travailler avec GitHub Les environnements \u00b6 Il y a deux environnements distincts : Le backend ou le coeur de Home Assistant Le frontend ou l'interface utilisateur Suivant ce que vous allez travailler, vous n'aurez pas besoin des m\u00eames langages, comp\u00e9tences et ressources. D\u00e9velopper en backend D\u00e9velopper en frontend Les ressources \u00b6 Ci-dessous un ensemble de ressources qui compl\u00e9teront votre apprentissage. La documentation d\u00e9veloppeur chez Home Assistant La gestion des flux , des Issues et des Pull Request (PR) de Github Le template pr\u00eat \u00e0 lemploi CookieCutter Les ic\u00f4nes incontournables de Material Design","title":"Accueil"},{"location":"#home-assistant---guide-du-d\u00e9veloppeur","text":"La bo\u00eete \u00e0 outils Participer aux projets Les environnements (Le backend et le frontend) Pr\u00e9parer son environnement Les ressources","title":"Home Assistant - Guide du d\u00e9veloppeur"},{"location":"#pr\u00e9sentation","text":"Ce guide a pour vocation de pr\u00e9senter le d\u00e9veloppement de composants de Home Assistant. Pour ce faire nous pr\u00e9senterons ind\u00e9pendamment chacun des environnements de d\u00e9veloppement : le backend qui concerne les int\u00e9grations (entit\u00e9s/sensors) le frontend qui concerne l'interface utilisateur (Lovelace et ses composants)","title":"Pr\u00e9sentation"},{"location":"#la-bo\u00eete-\u00e0-outils","text":"Chaque environnement a ses outils sp\u00e9cifiques et seront pr\u00e9cis\u00e9s dans chaque section. N\u00e9anmoins voici quelques \u00e9l\u00e9ments commun aux deux : Obligatoires : git pour la gestion de version. Un compte Github Recommand\u00e9s : Docker pour tester vos contributions dans un environement local et d\u00e9di\u00e9 (conteneur). Visual Studio Code (VSC) . Tout autre editeur peut convenir. VSC offre plusieurs addons qui facilitent le d\u00e9veloppemnent avec Home Assistant. L'Addon Remote - Containers pour VSC. Il permet d'utiliser les conteneurs de d\u00e9veloppement via Docker.","title":"La bo\u00eete \u00e0 outils"},{"location":"#participer-aux-projets","text":"Avant de pr\u00e9senter plus en avant le d\u00e9veloppement sous Home Assistant, nous allons faire un point sur la gestion d'un projet (un d\u00e9veloppement). Si vous \u00eates familier avec GitHub, vous pouvez passer ce chapitre. Pour les autres ... Travailler avec GitHub","title":"Participer aux projets"},{"location":"#les-environnements","text":"Il y a deux environnements distincts : Le backend ou le coeur de Home Assistant Le frontend ou l'interface utilisateur Suivant ce que vous allez travailler, vous n'aurez pas besoin des m\u00eames langages, comp\u00e9tences et ressources. D\u00e9velopper en backend D\u00e9velopper en frontend","title":"Les environnements"},{"location":"#les-ressources","text":"Ci-dessous un ensemble de ressources qui compl\u00e9teront votre apprentissage. La documentation d\u00e9veloppeur chez Home Assistant La gestion des flux , des Issues et des Pull Request (PR) de Github Le template pr\u00eat \u00e0 lemploi CookieCutter Les ic\u00f4nes incontournables de Material Design","title":"Les ressources"},{"location":"Backend/","text":"Le backend \u00b6 Comp\u00e9tences \u00b6 Pour cet environnement vous devez avoir des connaissances du langage Python. Vous pouvez acquerir des bases sur ce cours OpenClassroom. Context \u00b6 Il y a deux fa\u00e7ons d'ajouter des int\u00e9grations \u00e0 Home Asssitant: En modifiant le code de Home Assistant ainsi l'int\u00e9gration est disponible imm\u00e9diatement aux utilisateurs et n'importe quel d\u00e9veloppeur peut contribuer \u00e0 am\u00e9liorer l'int\u00e9gration. En revanche, il y a un certain nombre de contraintes \u00e0 respecter pour voir votre contribution int\u00e9grer le code officiel de Home Assistant. Et les mises \u00e0 jour ne seront d\u00e9ploy\u00e9es qu'au rythme impos\u00e9 par la l'\u00e9quipe officielle. En d\u00e9veloppant un module tier appel\u00e9 custom component , installable \u00e0 la main ou via HACS par les utilisateurs de Home Assistant. Il sera heb\u00e9rg\u00e9 sur votre compte GitHub (ou celui de l'organisation HACF) et vous serez responsable de la maintenance au rythme que vous imposerez. Cette int\u00e9gration sera moins visible et moins accessibles pour les utilisateurs mais vous aurez moins de contraintes pour le mettre au point. Bo\u00eete \u00e0 outils recommend\u00e9e \u00b6 pyenv pour g\u00e9rer les diff\u00e9rentes versions Python \u00e0 utiliser sur votre syst\u00e8me de d\u00e9veloppement. pipx pour installer des utilitaires Python dans des environnements isol\u00e9s. pre-commit pour assurer la qualit\u00e9 de vos modifications avant de les valider dans votre d\u00e9p\u00f4t (commit). Pr\u00e9parer son environnement \u00b6 Peu importe votre environnement (Linux, Mac ou Windows), vous devrez : Installer Docker . Suivant votre environnement ce sera : Docker Desktop pour Windows et Mac (attention une archive d'installation par syst\u00e8me) le service Docker pour Linux, via votre gestionnaire de paquet de votre distribution (yum, apt, ...) Installer Visual Studio Code (VSC) L'extension Remote - Containers pour VSC. Il permet d'utiliser les conteneurs de d\u00e9veloppement que detectera VSC en se basant sur Docker mais de mani\u00e8re transparente pour vous. Pr\u00e9requis \u00b6 Avoir un compte GitHub ainsi que git install\u00e9 et param\u00e9tr\u00e9 sur votre machine. Nous ne vous expliquerons pas ici, cherchez sur Internet si besoin. Clone d'un projet existant \u00b6 Pour travailler sur le code localement sur votre machine, il faut d'abord fork le d\u00e9p\u00f4t du custom component ou celui de HA core pour en avoir une copie sur votre compte. Ensuite le cloner sur votre machine. L\u00e0 aussi c'est g\u00e9n\u00e9rique, nous ne d\u00e9taillerons pas comment r\u00e9aliser cette partie. Utiliser un conteneur de d\u00e9veloppement \u00b6 Le d\u00e9p\u00f4t de Home Assistant core ainsi que certains custom components contiennent tous les param\u00e9tres pour vous permettre de tester vos modifications dans une instance locale et isol\u00e9e de Home Assistant. Pour fonctionner vous devez avoir VSC, Docker et l'extension Remote container. Lorsque vous ouvrirez le r\u00e9pertoire du d\u00e9p\u00f4t avec VSC, il devrait detecter la pr\u00e9sence du conteneur (pr\u00e9sence du repertoire .devcontainer/ ) et vous proposez d'ouvrir le projet dans le conteneur. Si ce n'est pas le cas vous pouvez le faire manuellement en cliquant sur le bouton vert en bas \u00e0 gauce et choisir Remote-Containers: Reopen in Container La premi\u00e8re fois VSC va cr\u00e9er et lancer le conteneur (cela peut prendre du temps) et installer les extensions pr\u00e9connis\u00e9s pour VSC par le d\u00e9veloppeur. Vous avez alors un environnement isol\u00e9 et pr\u00e9configur\u00e9. Pour lancer l'instance d'Home Assistant dans le conteneur, allez dans VSC, menu Terminal / Ex\u00e9cuter la t\u00e2ches et choisissez Preview . Le serveur Home Assistant va se lancer et sera disponible \u00e0 l'adresse http://localhost:8123. Vous pourrez relancer la t\u00e2ches apr\u00e8s avoir modifier le code, \u00e0 l'aide de la palette de commande T\u00e2ches - R\u00e9ex\u00e9cuter la derni\u00e8re t\u00e2che Il y a d'autres t\u00e2ches disponbilbes pour vous aider dans votre mise au point. Creation d'un custom component \u00b6 A VENIR Linting et formatage du Code \u00b6 A VENIR Logs et Debogguage \u00b6 A VENIR","title":"Le Backend"},{"location":"Backend/#le-backend","text":"","title":"Le backend"},{"location":"Backend/#comp\u00e9tences","text":"Pour cet environnement vous devez avoir des connaissances du langage Python. Vous pouvez acquerir des bases sur ce cours OpenClassroom.","title":"Comp\u00e9tences"},{"location":"Backend/#context","text":"Il y a deux fa\u00e7ons d'ajouter des int\u00e9grations \u00e0 Home Asssitant: En modifiant le code de Home Assistant ainsi l'int\u00e9gration est disponible imm\u00e9diatement aux utilisateurs et n'importe quel d\u00e9veloppeur peut contribuer \u00e0 am\u00e9liorer l'int\u00e9gration. En revanche, il y a un certain nombre de contraintes \u00e0 respecter pour voir votre contribution int\u00e9grer le code officiel de Home Assistant. Et les mises \u00e0 jour ne seront d\u00e9ploy\u00e9es qu'au rythme impos\u00e9 par la l'\u00e9quipe officielle. En d\u00e9veloppant un module tier appel\u00e9 custom component , installable \u00e0 la main ou via HACS par les utilisateurs de Home Assistant. Il sera heb\u00e9rg\u00e9 sur votre compte GitHub (ou celui de l'organisation HACF) et vous serez responsable de la maintenance au rythme que vous imposerez. Cette int\u00e9gration sera moins visible et moins accessibles pour les utilisateurs mais vous aurez moins de contraintes pour le mettre au point.","title":"Context"},{"location":"Backend/#bo\u00eete-\u00e0-outils-recommend\u00e9e","text":"pyenv pour g\u00e9rer les diff\u00e9rentes versions Python \u00e0 utiliser sur votre syst\u00e8me de d\u00e9veloppement. pipx pour installer des utilitaires Python dans des environnements isol\u00e9s. pre-commit pour assurer la qualit\u00e9 de vos modifications avant de les valider dans votre d\u00e9p\u00f4t (commit).","title":"Bo\u00eete \u00e0 outils recommend\u00e9e"},{"location":"Backend/#pr\u00e9parer-son-environnement","text":"Peu importe votre environnement (Linux, Mac ou Windows), vous devrez : Installer Docker . Suivant votre environnement ce sera : Docker Desktop pour Windows et Mac (attention une archive d'installation par syst\u00e8me) le service Docker pour Linux, via votre gestionnaire de paquet de votre distribution (yum, apt, ...) Installer Visual Studio Code (VSC) L'extension Remote - Containers pour VSC. Il permet d'utiliser les conteneurs de d\u00e9veloppement que detectera VSC en se basant sur Docker mais de mani\u00e8re transparente pour vous.","title":"Pr\u00e9parer son environnement"},{"location":"Backend/#pr\u00e9requis","text":"Avoir un compte GitHub ainsi que git install\u00e9 et param\u00e9tr\u00e9 sur votre machine. Nous ne vous expliquerons pas ici, cherchez sur Internet si besoin.","title":"Pr\u00e9requis"},{"location":"Backend/#clone-dun-projet-existant","text":"Pour travailler sur le code localement sur votre machine, il faut d'abord fork le d\u00e9p\u00f4t du custom component ou celui de HA core pour en avoir une copie sur votre compte. Ensuite le cloner sur votre machine. L\u00e0 aussi c'est g\u00e9n\u00e9rique, nous ne d\u00e9taillerons pas comment r\u00e9aliser cette partie.","title":"Clone d'un projet existant"},{"location":"Backend/#utiliser-un-conteneur-de-d\u00e9veloppement","text":"Le d\u00e9p\u00f4t de Home Assistant core ainsi que certains custom components contiennent tous les param\u00e9tres pour vous permettre de tester vos modifications dans une instance locale et isol\u00e9e de Home Assistant. Pour fonctionner vous devez avoir VSC, Docker et l'extension Remote container. Lorsque vous ouvrirez le r\u00e9pertoire du d\u00e9p\u00f4t avec VSC, il devrait detecter la pr\u00e9sence du conteneur (pr\u00e9sence du repertoire .devcontainer/ ) et vous proposez d'ouvrir le projet dans le conteneur. Si ce n'est pas le cas vous pouvez le faire manuellement en cliquant sur le bouton vert en bas \u00e0 gauce et choisir Remote-Containers: Reopen in Container La premi\u00e8re fois VSC va cr\u00e9er et lancer le conteneur (cela peut prendre du temps) et installer les extensions pr\u00e9connis\u00e9s pour VSC par le d\u00e9veloppeur. Vous avez alors un environnement isol\u00e9 et pr\u00e9configur\u00e9. Pour lancer l'instance d'Home Assistant dans le conteneur, allez dans VSC, menu Terminal / Ex\u00e9cuter la t\u00e2ches et choisissez Preview . Le serveur Home Assistant va se lancer et sera disponible \u00e0 l'adresse http://localhost:8123. Vous pourrez relancer la t\u00e2ches apr\u00e8s avoir modifier le code, \u00e0 l'aide de la palette de commande T\u00e2ches - R\u00e9ex\u00e9cuter la derni\u00e8re t\u00e2che Il y a d'autres t\u00e2ches disponbilbes pour vous aider dans votre mise au point.","title":"Utiliser un conteneur de d\u00e9veloppement"},{"location":"Backend/#creation-dun-custom-component","text":"A VENIR","title":"Creation d'un custom component"},{"location":"Backend/#linting-et-formatage-du-code","text":"A VENIR","title":"Linting et formatage du Code"},{"location":"Backend/#logs-et-debogguage","text":"A VENIR","title":"Logs et Debogguage"},{"location":"CONTRIBUTING/","text":"Instructions pour contribuer \u00b6 Pour tester la g\u00e9n\u00e9ration du site statique \u00b6 Ce d\u00e9p\u00f4t utilis\u00e9e pour g\u00e9n\u00e9rer un site web statique \u00e0 l'aide de Mkdocs . Pour tester en local la g\u00e9n\u00e9ration vous avez besoin d'installer nox au pr\u00e9alable. Ensuite nox s'occupe d'installer toutes les d\u00e9pendances n\u00e9cessaires dans un environnement virtuel: $ nox -s docs Cette commande a deux comportements: En mode interactif (typiquement quand vous lancez la commande dans votre terminal), elle g\u00e9n\u00e8re le contenu du site statique et lance un serveur pour le consulter \u00e0 l'aide de son navigateur en consultant l'URL http://127.0.0.1:8000/ En mode non-interactif (dans un script de Continuous Integration par exemple), elle g\u00e9n\u00e8re le contenu du site statique dans le r\u00e9pertoire site .","title":"Contribuer"},{"location":"CONTRIBUTING/#instructions-pour-contribuer","text":"","title":"Instructions pour contribuer"},{"location":"CONTRIBUTING/#pour-tester-la-g\u00e9n\u00e9ration-du-site-statique","text":"Ce d\u00e9p\u00f4t utilis\u00e9e pour g\u00e9n\u00e9rer un site web statique \u00e0 l'aide de Mkdocs . Pour tester en local la g\u00e9n\u00e9ration vous avez besoin d'installer nox au pr\u00e9alable. Ensuite nox s'occupe d'installer toutes les d\u00e9pendances n\u00e9cessaires dans un environnement virtuel: $ nox -s docs Cette commande a deux comportements: En mode interactif (typiquement quand vous lancez la commande dans votre terminal), elle g\u00e9n\u00e8re le contenu du site statique et lance un serveur pour le consulter \u00e0 l'aide de son navigateur en consultant l'URL http://127.0.0.1:8000/ En mode non-interactif (dans un script de Continuous Integration par exemple), elle g\u00e9n\u00e8re le contenu du site statique dans le r\u00e9pertoire site .","title":"Pour tester la g\u00e9n\u00e9ration du site statique"},{"location":"Frontend/","text":"Le Frontend \u00b6 Comp\u00e9tences \u00b6 Pour cet environnement vous devez avoir les comp\u00e9tences suivantes : Le d\u00e9veloppement avec Javascript ou TrueScript Le d\u00e9veloppement avec HTML et CSS Mais aussi : La biblioth\u00e8que LitElement du projet Polymer Project Le langage de templating Jinja L'environnement Node.js Le bundler Rollup.js Pr\u00e9parer son environnement \u00b6 A VENIR Ressources \u00b6 Jinja LitElement du projet Polymer Project","title":"Le Frontend"},{"location":"Frontend/#le-frontend","text":"","title":"Le Frontend"},{"location":"Frontend/#comp\u00e9tences","text":"Pour cet environnement vous devez avoir les comp\u00e9tences suivantes : Le d\u00e9veloppement avec Javascript ou TrueScript Le d\u00e9veloppement avec HTML et CSS Mais aussi : La biblioth\u00e8que LitElement du projet Polymer Project Le langage de templating Jinja L'environnement Node.js Le bundler Rollup.js","title":"Comp\u00e9tences"},{"location":"Frontend/#pr\u00e9parer-son-environnement","text":"A VENIR","title":"Pr\u00e9parer son environnement"},{"location":"Frontend/#ressources","text":"Jinja LitElement du projet Polymer Project","title":"Ressources"},{"location":"GitHub/","text":"Travailler GitHub \u00b6 Ce service est un incontournable du d\u00e9veloppement sous HA. Il a pour vocation non seulement de g\u00e9rer la vie d'un d\u00e9veloppement (source, version), mais \u00e9galement et surtout de pouvoir f\u00e9d\u00e9rer des d\u00e9veloppeurs sous un m\u00eame projet, et ce sans cacophonie g\u00e9n\u00e9rale. Pour vous aider \u00e0 vous familiariser avec GitHub, vous pouvez consulter ce petit guide qui pr\u00e9sente les bases (et un peu plus). Ne soyez pas effray\u00e9 par la manipulation en ligne de commande, vous verrez que vous pourrez vous en affranchir dans un outil de bureau (mais les bases sont \u00e0 conna\u00eetre!!!). Voyons quand m\u00eame quelques concepts indispensables.. Les outils \u00b6 Voici quelques outils : git est l'outil minimal \u00e0 installer pour g\u00e9rer avec Github. Git Desktop ou Git Kraken va s'ajouter \u00e0 git avec une application graphique vous simplifiant la vie. VSCode avec ses diff\u00e9rents composants de gestion Git, mais pas aussi pouss\u00e9 que les 2 clients pr\u00e9c\u00e9dents. M\u00e9thodologie \u00b6 Vous voulez soumettre un bug ou faire une demande d'\u00e9volution, dans ce cas il vous faut soumettre une issue sur le d\u00e9p\u00f4t principal. Vous voulez contribuer au d\u00e9veloppement (correction de bug, ajout de fonctionnalit\u00e9), il vous faut alors suivre ces \u00e9tapes : Le Fork , qui est la copie de la branche principale du d\u00e9p\u00f4t du projet sur votre d\u00e9p\u00f4t personnel GitHub. Le Clone , qui est la copie locale (sur votre PC) de votre d\u00e9p\u00f4t GitHub. Cr\u00e9er une branche de d\u00e9veloppement, qui est une branche sur votre d\u00e9p\u00f4t et propre \u00e0 vos modifications. Les Commit , qui sont les diff\u00e9rentes modifications que vous apportez. Ces commits doivent \u00eatre le plus sp\u00e9cialis\u00e9 possible, c'est-\u00e0-dire traiter une seule modification et non une dizaine . La Pull Request , qui sera la demande d'int\u00e9gration de vos modifications aupr\u00e8s de la branche principale. La Review , qui sera la r\u00e9vision de vos modifications par l'\u00e9quipe de d\u00e9veloppement du projet. Elle peut \u00eatre amen\u00e9e \u00e0 vous demander des modifications, refuser certaines parties, etc Le Merge , qui est la derni\u00e8re \u00e9tape et concerne l'int\u00e9gration d\u00e9finitive de votre Pull Request au projet. Cette derni\u00e8re \u00e9tape sera du ressort de l'\u00e9quipe du projet. Les d\u00e9p\u00f4ts \u00b6 Les d\u00e9p\u00f4ts sont des espaces de stockage sp\u00e9cifiques \u00e0 un projet. Ce terme n'est pas sp\u00e9cifique \u00e0 GitHub, vous le retrouverez pour Docker, Maven, etc En ce qui concerne GitHub, un d\u00e9p\u00f4t est associ\u00e9 \u00e0 un profil utilisateur ou d'organisation et son adresse sera https://github.com/ profil / projet Vous pouvez avoir plusieurs d\u00e9p\u00f4ts de r\u00e9f\u00e9renc\u00e9s dans votre copie locale. G\u00e9n\u00e9ralement, le 1er d\u00e9p\u00f4t que vous clonerez sera nomm\u00e9 origin et sera li\u00e9 \u00e0 votre d\u00e9p\u00f4t personnel. Vous ajouterez le d\u00e9p\u00f4t principale du projet, le upstream , ce qui permettra de visionner les diff\u00e9rences, remettre \u00e0 jour votre base suivant ce d\u00e9p\u00f4t, etc Bug et am\u00e9lioration (Issue) \u00b6 Un issue est tout aussi l'identification et description d'un bug que la description d'une am\u00e9lioration souhait\u00e9e. Ne pas h\u00e9siter \u00e0 alimenter, que ce soit sur les projets des autres que du votre. C'est intimement li\u00e9 aux pull request . La m\u00e9thode en d\u00e9tail \u00b6 Dupliquer un projet (Fork) \u00b6 C'est l'\u00e9tape #1 du sch\u00e9ma. Le fork est une copie d'un projet (autre que le votre normalement) en gardant toujours la r\u00e9f\u00e9rence de l'original. L'id\u00e9e ici est surtout de copier un projet sur son d\u00e9p\u00f4t Git personnel, de travailler tranquillement dessus, et de pouvoir transmettre vos modifications/corrections ( commit ) au d\u00e9p\u00f4t d'origine via des pull request . Comment faire : Sur GitHub , allez sur le d\u00e9p\u00f4t Git que vous souhaitez forker. Dans le coin en haut \u00e0 droite de ce d\u00e9p\u00f4t, cliquez sur Fork . Ce d\u00e9p\u00f4t doit apparaitre sur votre GitHub personnel. Cr\u00e9er un clone local \u00b6 C'est l'\u00e9tape #2 du sch\u00e9ma. Une fois le fork r\u00e9alis\u00e9 sur votre d\u00e9p\u00f4t github personnel, vous devez cr\u00e9er une copie local (sur votre machine) de ce d\u00e9p\u00f4t. Comment faire : Cr\u00e9er un clone de ce nouveau fork : git git clone https://github.com/<votre-nom-utilisateur-github>/<le-nom-du-fork> Configurer vos coordonn\u00e9es : git git config --local --replace-all user.email \"<l'adresse-mail-de-votre-compte-Github>\" git config --local --replace-all user.name \"<le-nom-utilis\u00e9-sur-votre-compte-Github>\" C'est sur cette copie locale que vous travaillerez : d\u00e9velopper, r\u00e9aliser des commit et les pousser r\u00e9guli\u00e8rement sur votre d\u00e9p\u00f4t. Travailler sereinement \u00b6 C'est l'\u00e9tape #3 du sch\u00e9ma. La branche main est une branche fonctionnelle . Pour \u00e9viter que vos modifications n'entra\u00eenent un bug, il faut toujours travailler sur une autre branche que main . Vous devez donc cr\u00e9er une branche qui contiendra vos modifications. Comment faire : Placez vous dans le r\u00e9pertoire de votre d\u00e9p\u00f4t local : shell cd <le-nom-du-fork> Puis cr\u00e9er votre nouvelle branche : git git checkout -b <newBranch> Faire des modifications ou ajouts \u00b6 C'est l'\u00e9tape #4 & #5 du sch\u00e9ma. Les modifications sont les commit . Le principe au sujet des commit est de les faire petits, li\u00e9s \u00e0 une correction ou un ajout minimaliste. Comment faire : Placez vous dans le r\u00e9pertoire de votre d\u00e9p\u00f4t local : shell cd <le-nom-du-fork> Ajouter vos fichiers modifi\u00e9s \u00e0 l'index : git git add <le-fichier-modifi\u00e9> <un-autre-fichier-modifi\u00e9> ou si vous vous voulez prendre toutes vos modifs git git add . Sauvegarder vos modifications : git git commit -m \"<message de commit>\" Mettre \u00e0 jour votre d\u00e9p\u00f4t distant \u00b6 C'est l'\u00e9tape #6 & #10 du sch\u00e9ma. Cette \u00e9tape permet de mettre \u00e0 jour votre branche distante avec les modifications de votre branche locale. Elle va \u00eatre possible gr\u00e2ce \u00e0 la commande push . Comment faire : Pousser vos modifications sur votre d\u00e9p\u00f4t distant : git git push origin <newBranch> Soumettre un correctif (Pull Request) \u00b6 C'est l'\u00e9tape #11 du sch\u00e9ma. Enfin un pull request est une proposition de correction ou modification du projet, sous forme de code source ou autres fichiers (images, etc). Cette d\u00e9marche est \u00e0 faire via GitHub. Comment faire : Connectez vous sur votre GitHub Allez dans le d\u00e9p\u00f4t que vous avez fork\u00e9 Cliquez sur l'onglet Pull Requests Puis sur le bouton vert New pull request \u00e0 droite Choisissez la branche de votre d\u00e9p\u00f4t en cliquant sur le bouton compare: main Puis enfin sur le bouton Create pull request Mettre \u00e0 jour votre votre d\u00e9p\u00f4t local depuis le d\u00e9p\u00f4t fork\u00e9 \u00b6 C'est l'\u00e9tape #7, #8 & #9 du sch\u00e9ma. Suite \u00e0 votre pull request , le propri\u00e9taire du d\u00e9p\u00f4t fork\u00e9 accepte vos modifications. Pour que ces modifications soit correctement int\u00e9gr\u00e9es \u00e0 votre d\u00e9p\u00f4t local, il faut relier votre d\u00e9p\u00f4t local au d\u00e9p\u00f4t fork\u00e9. Comment faire : Reliez votre clone local au d\u00e9p\u00f4t d' (\u00e9tape #7) : git git remote add upstream <URL du d\u00e9p\u00f4t d'origine> V\u00e9rifiez en tapant la commande : git git remote -v origin https://github.com/<votre-nom-utilisateur-github>/<le-nom-du-fork> (fetch) origin https://github.com/<votre-nom-utilisateur-github>/<le-nom-du-fork> (push) upstream <URL-du-d\u00e9p\u00f4t-d'origine> (fetch) upstream <URL-du-d\u00e9p\u00f4t-d'origine> (fetch) R\u00e9cup\u00e9rez les modifications sur votre d\u00e9p\u00f4t local (\u00e9tape #8) : git git checkout main git pull upstream main git push origin main Mettez \u00e0 jour votre branche de travail si besoin (pas n\u00e9cessaire si vous cr\u00e9ez une nouvelle branche depuis main ) : git git checkout <newBranch> git rebase main Conclusion \u00b6 Ne n\u00e9gligez pas GitHub, il est votre meilleur ami ... mais peut apporter pas mal de confusion (corruption de source, mauvais commentaires, etc). Vous avez les bases et les concepts pour entrez dans le vif du d\u00e9veloppement HA!","title":"GitHub"},{"location":"GitHub/#travailler-github","text":"Ce service est un incontournable du d\u00e9veloppement sous HA. Il a pour vocation non seulement de g\u00e9rer la vie d'un d\u00e9veloppement (source, version), mais \u00e9galement et surtout de pouvoir f\u00e9d\u00e9rer des d\u00e9veloppeurs sous un m\u00eame projet, et ce sans cacophonie g\u00e9n\u00e9rale. Pour vous aider \u00e0 vous familiariser avec GitHub, vous pouvez consulter ce petit guide qui pr\u00e9sente les bases (et un peu plus). Ne soyez pas effray\u00e9 par la manipulation en ligne de commande, vous verrez que vous pourrez vous en affranchir dans un outil de bureau (mais les bases sont \u00e0 conna\u00eetre!!!). Voyons quand m\u00eame quelques concepts indispensables..","title":"Travailler GitHub"},{"location":"GitHub/#les-outils","text":"Voici quelques outils : git est l'outil minimal \u00e0 installer pour g\u00e9rer avec Github. Git Desktop ou Git Kraken va s'ajouter \u00e0 git avec une application graphique vous simplifiant la vie. VSCode avec ses diff\u00e9rents composants de gestion Git, mais pas aussi pouss\u00e9 que les 2 clients pr\u00e9c\u00e9dents.","title":"Les outils"},{"location":"GitHub/#m\u00e9thodologie","text":"Vous voulez soumettre un bug ou faire une demande d'\u00e9volution, dans ce cas il vous faut soumettre une issue sur le d\u00e9p\u00f4t principal. Vous voulez contribuer au d\u00e9veloppement (correction de bug, ajout de fonctionnalit\u00e9), il vous faut alors suivre ces \u00e9tapes : Le Fork , qui est la copie de la branche principale du d\u00e9p\u00f4t du projet sur votre d\u00e9p\u00f4t personnel GitHub. Le Clone , qui est la copie locale (sur votre PC) de votre d\u00e9p\u00f4t GitHub. Cr\u00e9er une branche de d\u00e9veloppement, qui est une branche sur votre d\u00e9p\u00f4t et propre \u00e0 vos modifications. Les Commit , qui sont les diff\u00e9rentes modifications que vous apportez. Ces commits doivent \u00eatre le plus sp\u00e9cialis\u00e9 possible, c'est-\u00e0-dire traiter une seule modification et non une dizaine . La Pull Request , qui sera la demande d'int\u00e9gration de vos modifications aupr\u00e8s de la branche principale. La Review , qui sera la r\u00e9vision de vos modifications par l'\u00e9quipe de d\u00e9veloppement du projet. Elle peut \u00eatre amen\u00e9e \u00e0 vous demander des modifications, refuser certaines parties, etc Le Merge , qui est la derni\u00e8re \u00e9tape et concerne l'int\u00e9gration d\u00e9finitive de votre Pull Request au projet. Cette derni\u00e8re \u00e9tape sera du ressort de l'\u00e9quipe du projet.","title":"M\u00e9thodologie"},{"location":"GitHub/#les-d\u00e9p\u00f4ts","text":"Les d\u00e9p\u00f4ts sont des espaces de stockage sp\u00e9cifiques \u00e0 un projet. Ce terme n'est pas sp\u00e9cifique \u00e0 GitHub, vous le retrouverez pour Docker, Maven, etc En ce qui concerne GitHub, un d\u00e9p\u00f4t est associ\u00e9 \u00e0 un profil utilisateur ou d'organisation et son adresse sera https://github.com/ profil / projet Vous pouvez avoir plusieurs d\u00e9p\u00f4ts de r\u00e9f\u00e9renc\u00e9s dans votre copie locale. G\u00e9n\u00e9ralement, le 1er d\u00e9p\u00f4t que vous clonerez sera nomm\u00e9 origin et sera li\u00e9 \u00e0 votre d\u00e9p\u00f4t personnel. Vous ajouterez le d\u00e9p\u00f4t principale du projet, le upstream , ce qui permettra de visionner les diff\u00e9rences, remettre \u00e0 jour votre base suivant ce d\u00e9p\u00f4t, etc","title":"Les d\u00e9p\u00f4ts"},{"location":"GitHub/#bug-et-am\u00e9lioration-issue","text":"Un issue est tout aussi l'identification et description d'un bug que la description d'une am\u00e9lioration souhait\u00e9e. Ne pas h\u00e9siter \u00e0 alimenter, que ce soit sur les projets des autres que du votre. C'est intimement li\u00e9 aux pull request .","title":"Bug et am\u00e9lioration (Issue)"},{"location":"GitHub/#la-m\u00e9thode-en-d\u00e9tail","text":"","title":"La m\u00e9thode en d\u00e9tail"},{"location":"GitHub/#dupliquer-un-projet-fork","text":"C'est l'\u00e9tape #1 du sch\u00e9ma. Le fork est une copie d'un projet (autre que le votre normalement) en gardant toujours la r\u00e9f\u00e9rence de l'original. L'id\u00e9e ici est surtout de copier un projet sur son d\u00e9p\u00f4t Git personnel, de travailler tranquillement dessus, et de pouvoir transmettre vos modifications/corrections ( commit ) au d\u00e9p\u00f4t d'origine via des pull request . Comment faire : Sur GitHub , allez sur le d\u00e9p\u00f4t Git que vous souhaitez forker. Dans le coin en haut \u00e0 droite de ce d\u00e9p\u00f4t, cliquez sur Fork . Ce d\u00e9p\u00f4t doit apparaitre sur votre GitHub personnel.","title":"Dupliquer un projet (Fork)"},{"location":"GitHub/#cr\u00e9er-un-clone-local","text":"C'est l'\u00e9tape #2 du sch\u00e9ma. Une fois le fork r\u00e9alis\u00e9 sur votre d\u00e9p\u00f4t github personnel, vous devez cr\u00e9er une copie local (sur votre machine) de ce d\u00e9p\u00f4t. Comment faire : Cr\u00e9er un clone de ce nouveau fork : git git clone https://github.com/<votre-nom-utilisateur-github>/<le-nom-du-fork> Configurer vos coordonn\u00e9es : git git config --local --replace-all user.email \"<l'adresse-mail-de-votre-compte-Github>\" git config --local --replace-all user.name \"<le-nom-utilis\u00e9-sur-votre-compte-Github>\" C'est sur cette copie locale que vous travaillerez : d\u00e9velopper, r\u00e9aliser des commit et les pousser r\u00e9guli\u00e8rement sur votre d\u00e9p\u00f4t.","title":"Cr\u00e9er un clone local"},{"location":"GitHub/#travailler-sereinement","text":"C'est l'\u00e9tape #3 du sch\u00e9ma. La branche main est une branche fonctionnelle . Pour \u00e9viter que vos modifications n'entra\u00eenent un bug, il faut toujours travailler sur une autre branche que main . Vous devez donc cr\u00e9er une branche qui contiendra vos modifications. Comment faire : Placez vous dans le r\u00e9pertoire de votre d\u00e9p\u00f4t local : shell cd <le-nom-du-fork> Puis cr\u00e9er votre nouvelle branche : git git checkout -b <newBranch>","title":"Travailler sereinement"},{"location":"GitHub/#faire-des-modifications-ou-ajouts","text":"C'est l'\u00e9tape #4 & #5 du sch\u00e9ma. Les modifications sont les commit . Le principe au sujet des commit est de les faire petits, li\u00e9s \u00e0 une correction ou un ajout minimaliste. Comment faire : Placez vous dans le r\u00e9pertoire de votre d\u00e9p\u00f4t local : shell cd <le-nom-du-fork> Ajouter vos fichiers modifi\u00e9s \u00e0 l'index : git git add <le-fichier-modifi\u00e9> <un-autre-fichier-modifi\u00e9> ou si vous vous voulez prendre toutes vos modifs git git add . Sauvegarder vos modifications : git git commit -m \"<message de commit>\"","title":"Faire des modifications ou ajouts"},{"location":"GitHub/#mettre-\u00e0-jour-votre-d\u00e9p\u00f4t-distant","text":"C'est l'\u00e9tape #6 & #10 du sch\u00e9ma. Cette \u00e9tape permet de mettre \u00e0 jour votre branche distante avec les modifications de votre branche locale. Elle va \u00eatre possible gr\u00e2ce \u00e0 la commande push . Comment faire : Pousser vos modifications sur votre d\u00e9p\u00f4t distant : git git push origin <newBranch>","title":"Mettre \u00e0 jour votre d\u00e9p\u00f4t distant"},{"location":"GitHub/#soumettre-un-correctif-pull-request","text":"C'est l'\u00e9tape #11 du sch\u00e9ma. Enfin un pull request est une proposition de correction ou modification du projet, sous forme de code source ou autres fichiers (images, etc). Cette d\u00e9marche est \u00e0 faire via GitHub. Comment faire : Connectez vous sur votre GitHub Allez dans le d\u00e9p\u00f4t que vous avez fork\u00e9 Cliquez sur l'onglet Pull Requests Puis sur le bouton vert New pull request \u00e0 droite Choisissez la branche de votre d\u00e9p\u00f4t en cliquant sur le bouton compare: main Puis enfin sur le bouton Create pull request","title":"Soumettre un correctif (Pull Request)"},{"location":"GitHub/#mettre-\u00e0-jour-votre-votre-d\u00e9p\u00f4t-local-depuis-le-d\u00e9p\u00f4t-fork\u00e9","text":"C'est l'\u00e9tape #7, #8 & #9 du sch\u00e9ma. Suite \u00e0 votre pull request , le propri\u00e9taire du d\u00e9p\u00f4t fork\u00e9 accepte vos modifications. Pour que ces modifications soit correctement int\u00e9gr\u00e9es \u00e0 votre d\u00e9p\u00f4t local, il faut relier votre d\u00e9p\u00f4t local au d\u00e9p\u00f4t fork\u00e9. Comment faire : Reliez votre clone local au d\u00e9p\u00f4t d' (\u00e9tape #7) : git git remote add upstream <URL du d\u00e9p\u00f4t d'origine> V\u00e9rifiez en tapant la commande : git git remote -v origin https://github.com/<votre-nom-utilisateur-github>/<le-nom-du-fork> (fetch) origin https://github.com/<votre-nom-utilisateur-github>/<le-nom-du-fork> (push) upstream <URL-du-d\u00e9p\u00f4t-d'origine> (fetch) upstream <URL-du-d\u00e9p\u00f4t-d'origine> (fetch) R\u00e9cup\u00e9rez les modifications sur votre d\u00e9p\u00f4t local (\u00e9tape #8) : git git checkout main git pull upstream main git push origin main Mettez \u00e0 jour votre branche de travail si besoin (pas n\u00e9cessaire si vous cr\u00e9ez une nouvelle branche depuis main ) : git git checkout <newBranch> git rebase main","title":"Mettre \u00e0 jour votre votre d\u00e9p\u00f4t local depuis le d\u00e9p\u00f4t fork\u00e9"},{"location":"GitHub/#conclusion","text":"Ne n\u00e9gligez pas GitHub, il est votre meilleur ami ... mais peut apporter pas mal de confusion (corruption de source, mauvais commentaires, etc). Vous avez les bases et les concepts pour entrez dans le vif du d\u00e9veloppement HA!","title":"Conclusion"}]}